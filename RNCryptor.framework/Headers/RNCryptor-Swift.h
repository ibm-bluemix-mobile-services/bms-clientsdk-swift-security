// Generated by Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface NSData (SWIFT_EXTENSION(RNCryptor))
@end



/// RNCryptor encryption/decryption interface.
SWIFT_CLASS("_TtC9RNCryptor9RNCryptor")
@interface RNCryptor : NSObject

/// Encrypt data using password and return encrypted data.
+ (NSData * __nonnull)encryptData:(NSData * __nonnull)data password:(NSString * __nonnull)password;

/// Decrypt data using password and return decrypted data. Throws if password is incorrect or ciphertext is in the wrong format.
///
/// \param error <code>Error
/// </code>
+ (NSData * __nullable)decryptData:(NSData * __nonnull)data password:(NSString * __nonnull)password error:(NSError * __nullable * __null_unspecified)error;

/// Generates random NSData of given length Crashes if length is larger than allocatable memory, or if the system random number generator is not available.
+ (NSData * __nonnull)randomDataOfLength:(NSInteger)length;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A encryptor for the latest data format. If compatibility with other RNCryptor implementations is required, you may wish to use the specific encryptor version rather than accepting "latest."
SWIFT_CLASS_NAMED("Encryptor")
@interface RNEncryptor : NSObject

/// Creates and returns a cryptor.
///
/// \param password Non-empty password string. This will be interpretted as UTF-8.
- (nonnull instancetype)initWithPassword:(NSString * __nonnull)password OBJC_DESIGNATED_INITIALIZER;

/// Updates cryptor with data and returns processed data.
///
/// \param data Data to process. May be empty.
///
/// \returns  Processed data. May be empty.
- (NSData * __nonnull)updateWithData:(NSData * __nonnull)data;

/// Returns trailing data and invalidates the cryptor.
///
/// \returns  Trailing data
- (NSData * __nonnull)finalData;

/// Simplified, generic interface to RNCryptorType. Takes a data, returns a processed data, and invalidates the cryptor.
- (NSData * __nonnull)encryptData:(NSData * __nonnull)data;
@end



/// Password-based decryptor that can handle any supported format.
SWIFT_CLASS_NAMED("Decryptor")
@interface RNDecryptor : NSObject

/// Creates and returns a cryptor.
///
/// \param password Non-empty password string. This will be interpretted as UTF-8.
- (nonnull instancetype)initWithPassword:(NSString * __nonnull)password OBJC_DESIGNATED_INITIALIZER;

/// Decrypt data using password and return decrypted data, invalidating decryptor. Throws if password is incorrect or ciphertext is in the wrong format.
///
/// \param error <code>Error
/// </code>
- (NSData * __nullable)decryptData:(NSData * __nonnull)data error:(NSError * __nullable * __null_unspecified)error;

/// Updates cryptor with data and returns processed data.
///
/// \param data Data to process. May be empty.
///
/// \param error <code>Error
/// </code>
///
/// \returns  Processed data. May be empty.
- (NSData * __nullable)updateWithData:(NSData * __nonnull)data error:(NSError * __nullable * __null_unspecified)error;

/// Returns trailing data and invalidates the cryptor.
///
/// \param error <code>Error
/// </code>
///
/// \returns  Trailing data
- (NSData * __nullable)finalDataAndReturnError:(NSError * __nullable * __null_unspecified)error;
@end


@interface RNCryptor (SWIFT_EXTENSION(RNCryptor))
@end



/// V3 format settings
SWIFT_CLASS_NAMED("FormatV3")
@interface RNCryptorFormatV3 : NSObject

/// Size of AES and HMAC keys
+ (NSInteger)keySize;

/// Size of PBKDF2 salt
+ (NSInteger)saltSize;

/// Generate a key from a password and salt
///
/// \param password Password to convert
///
/// \param salt Salt. Generally constructed with RNCryptor.randomDataOfLength(FormatV3.saltSize)
///
/// \returns  Key of length FormatV3.keySize
+ (NSData * __nonnull)keyForPassword:(NSString * __nonnull)password salt:(NSData * __nonnull)salt;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Format version 3 encryptor. Use this to ensure a specific format verison or when using keys (which are inherrently versions-specific). To use "the latest encryptor" with a password, use Encryptor instead.
SWIFT_CLASS_NAMED("EncryptorV3")
@interface RNEncryptorV3 : NSObject

/// Creates and returns an encryptor.
///
/// \param password Non-empty password string. This will be interpretted as UTF-8.
- (nonnull instancetype)initWithPassword:(NSString * __nonnull)password;

/// Creates and returns an encryptor using keys.\Attention 
///
/// This method requires some expertise to use correctly.
/// Most users should use <code>init(password:)
/// </code> which is simpler
/// to use securely.
///
/// Keys should not be generated directly from strings (<code>.dataUsingEncoding()
/// </code> or similar).
/// Ideally, keys should be random (<code>Cryptor.randomDataOfLength()
/// </code> or some other high-quality
/// random generator. If keys must be generated from strings, then use <code>FormatV3.keyForPassword(salt:)
/// </code>
/// with a random salt, or just use password-based encryption (that's what it's for).
///
/// \param encryptionKey AES-256 key. Must be exactly FormatV3.keySize (kCCKeySizeAES256, 32 bytes)
///
/// \param hmacKey HMAC key. Must be exactly FormatV3.keySize (kCCKeySizeAES256, 32 bytes)
- (nonnull instancetype)initWithEncryptionKey:(NSData * __nonnull)encryptionKey hmacKey:(NSData * __nonnull)hmacKey;

/// Takes a data, returns a processed data, and invalidates the cryptor.
- (NSData * __nonnull)encryptData:(NSData * __nonnull)data;

/// Updates cryptor with data and returns encrypted data.
///
/// \param data Data to process. May be empty.
///
/// \returns  Processed data. May be empty.
- (NSData * __nonnull)updateWithData:(NSData * __nonnull)data;

/// Returns trailing data and invalidates the cryptor.
///
/// \returns  Trailing data
- (NSData * __nonnull)finalData;
@end



/// Format version 3 decryptor. This is required in order to decrypt using keys (since key configuration is version-specific). For password decryption, Decryptor is generally preferred, and will call this if appropriate.
SWIFT_CLASS_NAMED("DecryptorV3")
@interface RNDecryptorV3 : NSObject

/// Creates and returns a decryptor.
///
/// \param password Non-empty password string. This will be interpretted as UTF-8.
- (nonnull instancetype)initWithPassword:(NSString * __nonnull)password OBJC_DESIGNATED_INITIALIZER;

/// Creates and returns a decryptor using keys.
///
/// \param encryptionKey AES-256 key. Must be exactly FormatV3.keySize (kCCKeySizeAES256, 32 bytes)
///
/// \param hmacKey HMAC key. Must be exactly FormatV3.keySize (kCCKeySizeAES256, 32 bytes)
- (nonnull instancetype)initWithEncryptionKey:(NSData * __nonnull)encryptionKey hmacKey:(NSData * __nonnull)hmacKey OBJC_DESIGNATED_INITIALIZER;

/// Decrypt data using password and return decrypted data. Throws if password is incorrect or ciphertext is in the wrong format.
///
/// \param error <code>Error
/// </code>
- (NSData * __nullable)decryptData:(NSData * __nonnull)data error:(NSError * __nullable * __null_unspecified)error;

/// Updates cryptor with data and returns encrypted data.
///
/// \param data Data to process. May be empty.
///
/// \returns  Processed data. May be empty.
- (NSData * __nullable)updateWithData:(NSData * __nonnull)data error:(NSError * __nullable * __null_unspecified)error;

/// Returns trailing data and invalidates the cryptor.
///
/// \returns  Trailing data
- (NSData * __nullable)finalDataAndReturnError:(NSError * __nullable * __null_unspecified)error;
@end


/// Errors thrown by RNCryptorType.
typedef SWIFT_ENUM(NSInteger, RNCryptorError) {

/// Ciphertext was corrupt or password was incorrect. It is not possible to distinguish between these cases in the v3 data format.
  RNCryptorErrorHMACMismatch = 1,

/// Unrecognized data format. Usually this means the data is corrupt.
  RNCryptorErrorUnknownHeader = 2,

/// final() was called before sufficient data was passed to updateWithData()
  RNCryptorErrorMessageTooShort = 3,

/// Memory allocation failure. This should never happen.
  RNCryptorErrorMemoryFailure = 4,

/// A password-based decryptor was used on a key-based ciphertext, or vice-versa.
  RNCryptorErrorInvalidCredentialType = 5,
};
static NSString * const RNCryptorErrorDomain = @"RNCryptor.RNCryptorError";

#pragma clang diagnostic pop
